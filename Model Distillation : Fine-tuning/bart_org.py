# -*- coding: utf-8 -*-
"""BART.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fWmEdT78dtrURs3lMmtJDAnZ5gvMjwou
"""

# !pip install datasets

# !pip install transformers[torch]

# !pip install accelerate -U

import json
from datasets import Dataset
from transformers import BartForConditionalGeneration, BartTokenizer, TrainingArguments, Trainer
import torch

# from google.colab import drive
# drive.mount('/content/drive')


def load_data(file_path):
    with open(file_path, 'r') as file:
        data = json.load(file)
    return Dataset.from_list(data)

main_path = "/scratch/zheliu92/"

valid_data = load_data(main_path+'valid.json')
test_data = load_data(main_path+'test.json')

for condition in ['gpt']: # 'full', 'small', 'org', 'gpt'
    train_data = load_data(main_path+ f'train_{condition}.json')

    # Load model and tokenizer
    model_name = "facebook/bart-large"
    model = BartForConditionalGeneration.from_pretrained(model_name)
    tokenizer = BartTokenizer.from_pretrained(model_name)

    # Preprocess data 
    def preprocess_function(examples):
        inputs = [q + " " + a for q, a in zip(examples['question'], examples['answer'])]
        targets = examples['follow-up']
        model_inputs = tokenizer(inputs, max_length=1024, truncation=True, padding="max_length")
        with tokenizer.as_target_tokenizer():
            labels = tokenizer(targets, max_length=1024, truncation=True, padding="max_length")
        model_inputs["labels"] = labels["input_ids"]
        return model_inputs

    tokenized_train_data = train_data.map(preprocess_function, batched=True)
    tokenized_valid_data = valid_data.map(preprocess_function, batched=True)
    tokenized_test_data = test_data.map(preprocess_function, batched=True)

    training_args = TrainingArguments(
        output_dir=f"./results_{condition}",
        evaluation_strategy="epoch",
        learning_rate=2e-5,
        per_device_train_batch_size=8,
        per_device_eval_batch_size=8,
        num_train_epochs=10,
        seed=21,
        save_strategy="steps",
        save_steps=1500
    )

    print("staaaaaaaaaaaaaaaaaart")
    import time
    start_time = time.time()

    # Train the model
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=tokenized_train_data,
        eval_dataset=tokenized_valid_data,
    )

    trainer.train()

    print("donnnnnnnnnnnnnne")
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Elapsed time: {elapsed_time} seconds")

    # Evaluate the model
    results = trainer.evaluate(tokenized_test_data)

    model.save_pretrained(main_path+f'trained_{condition}_model')
    tokenizer.save_pretrained(main_path+f'trained_{condition}_model')